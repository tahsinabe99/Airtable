// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Base {
  id      String   @id @default(cuid())
  name    String
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  tables  Table[]
}


model Table {
  id      String  @id @default(cuid())
  name    String
  baseId  String
  base    Base    @relation(fields: [baseId], references: [id])
  columns Column[]
  rows    Row[]
}

model Column {
  id      String      @id @default(cuid())
  name    String
  type    ColumnType
  tableId String
  table   Table       @relation(fields: [tableId], references: [id])
  cells   Cell[] 
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  cells     Cell[]
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt
}


model Cell {
  id        String @id @default(cuid())
  value     String
  rowId     String
  row       Row    @relation(fields: [rowId], references: [id])
  columnId  String
  column    Column @relation(fields: [columnId], references: [id])
}

enum ColumnType {
  TEXT
  NUMBER
}
